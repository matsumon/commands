Git

generate private and public keys
	1) ssh-keygen -t ed25519 -C nicholas.matsumoto@tektronix.com
	2) ssh-keygen -t rsa
	3) Copy public key to authorized_keys to ssh in w/o password
git rebase -i HEAD~5
	i for interactive
	5 is the number of commits to squash
	5 can also be the oldest commit
pick - pick the oldest commit 
squash - takes the current commit and squashes it into the previous
	Ex) oldest   pick       squash     squash   newest
git -abort
git --continue

checkout branch from remote
	git checkout -b localBranchName remoteBranchName

rebase

git rebase -i <commit hash>
squash pick 
git push --force

rebase while perserving merges

git rebase -ir <commit has>
squash pick
git push --force

merge branches

checkout branch you want to have combined with
Example) you have a feature on a branch and someone push to main

git checkout feature_branch
git merge main

Revert all changes from working directory
git revert --hard 
or
git checkout .

amends last commit
git commit --amend
git commit --amend -m "Revise commit message"
git add files
git rm files
git commit --amend--no-edit #amends commit without changing message
git push

revert a single file to a previous commit
git checkout <git commit id> -- path_to_file
Ex)
git checkout f7e65cdee7a63a941db5cc8441669efcf5b6b5b2 -- /file/file.txt

push commit to another branch head
git push origin HEAD:<branch name>
ex) 
git push origin HEAD:feature/nmatsumoto/LIM-port-documentation

push commit from local branch to remote branch
git push origin local_branch:origin/remote_branch

Solving git merge conflicts
	find the <<<<head<< 
	delete all of the <<<head <<tail etc...
	git add files changes
	git push
	Should now be merged

Force Pull
git fetch //grabs all branch references 
git reset --hard origin/<branch_name> //pull in changes and gets rid of changes

List ignored files
git ls-files . --ignored --exclude-standard --others

List untracked files
git ls-files . --exclude-standard --others

Delete all files not recognized by git repo
git clean -ffxd

Submodules: Repo within a repo https://www.youtube.com/watch?v=gSlXo2iLBro&t=85s
Creates a .gitmodules which is how git keeps track of submodules 
contains path - path in directory to submodule and 
url - the git repo url

git submodule add {git repo to add as submodule} // adds a desired submodule to repo
After need to git commit "files added" and git push

grabs all submodules(even submodules within submodules) and adds it to repo
git submodule update --init --recursive

Add a submodule for commit, change where the parent repo points for a single submodule
git add submodule
Ex) git add frameworks/hardwareaccess

clone directory + all submodules
git clone --recurse-submodules {git repo to clone}

recursively pulls in all submodules + other files
git pull --recurse-submodules

recursively gets rid of changes
git submodule foreach --recursive git reset --hard

git stash
Description: Acts like a queue. Users can 'git stash push' to create a new stash and 
save it locally. This will roll back the changes to modified files. The stash can 
be popped off the stack by using git stash pop. 

push local changes to stash
git stash push

bring back changes from stash
git stash pop

list stash history
git stash list

remove all stash entries
git stash clear

push and set upstream origin branch
git push --set-upstream origin branch
Ex) git push --set-upstream origin sandbox/feature/u607390/PSSW-290

checkout a branch based off another feature branch
git checkout -b local_branch remote_branch
Ex) git checkout -b sandbox/feature/u607390/PSSW-290 origin/feature/stratix10ecr

cherry pick a single file from another branch to add
git checkout origin/branch_name submodule/path_to_file
Ex) git checkout origin/sandbox/feature/u607390/PSSW-290 deviceAccess/pmuupdater.bat